{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Person","props","style","border","margin","name","Friends","frdName","color","details","Product","className","Proname","price","Counter","useState","count","setCoutn","onClick","Users","userData","user","setusers","useEffect","fetch","then","res","json","data","length","map","App","names","products","productNames","product","console","log","name2","pd","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,oHC6E3C,SAASC,EAAOC,GAMd,OACE,yBAAKC,MANY,CACjBC,OAAQ,gBACRC,OAAQ,SAKN,qCAAWH,EAAMI,MACjB,oCACA,8BAKN,SAASC,EAASC,GAMhB,OACE,yBAAKL,MANU,CACfM,MAAO,UACPL,OAAQ,oBACRC,OAAQ,SAIN,4CAAkBG,EAAQF,KAA1B,QACA,8CAAoBE,EAAQE,UAKlC,SAASC,EAAQT,GAEf,OACE,yBAAKU,UAAU,iBACb,4BAAKV,EAAMW,QAAQP,MACnB,4BAAKJ,EAAMW,QAAQC,OACnB,4CAMN,SAASC,IAAW,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,KAIjB,OACE,6BACE,sCAAYD,GACZ,4BAAQE,QALW,kBAAMD,EAASD,EAAQ,KAK1C,YACA,4BAAQE,QALW,kBAAMD,EAASD,EAAQ,KAK1C,aAMN,SAASG,EAAMC,GAAW,IAAD,EACEL,mBAAS,IADX,mBAChBM,EADgB,KACVC,EADU,KAUvB,OARAC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIN,EAASM,QAEvB,IAIA,6BACE,6CAAmBP,EAAKQ,QACxB,4BAEIR,EAAKS,KAAI,SAAAT,GAAI,OAAI,4BAAKA,EAAKhB,WAOtB0B,MAtJf,WACE,IAAMC,EAAQ,CAAC,gBAAiB,QAAS,SAAU,SAAU,QAAS,SAIhEC,EAAW,CACf,CAAC5B,KAAM,YAAaQ,MAAO,QAC3B,CAACR,KAAM,cAAeQ,MAAO,QAC7B,CAACR,KAAM,WAAYQ,MAAO,QAC1B,CAACR,KAAM,cAAeQ,MAAO,QAC7B,CAACR,KAAM,eAAgBQ,MAAO,QAC9B,CAACR,KAAM,iBAAkBQ,MAAO,SAG5BqB,EAAeD,EAASH,KAAK,SAAAK,GAAO,OAAIA,EAAQ9B,QAatD,OAZA+B,QAAQC,IAAIH,GAaV,yBAAKvB,UAAU,OAChB,yBAAKA,UAAU,aACd,4BAEEqB,EAAMF,KAAI,SAAAzB,GAAI,OAAI,4BAAKA,OAGzB,kBAACL,EAAD,CAAQK,KAAO2B,EAAM,GAAIM,MAAQ,UACjC,kBAACtC,EAAD,CAAQK,KAAK,OAAOiC,MAAQ,eAC5B,kBAACtC,EAAD,MACA,kBAACA,EAAD,MAEA,kBAACM,EAAD,CAASD,KAAO,SAASI,QAAS,qBAClC,kBAACH,EAAD,CAASD,KAAO,QAAQI,QAAS,0BACjC,kBAACH,EAAD,CAASD,KAAO,SAASI,QAAS,uBAClC,kBAACH,EAAD,CAASD,KAAO,SAASI,QAAS,sBAMjCwB,EAASH,KAAI,SAAAS,GAAE,OAAI,kBAAC7B,EAAD,CAASE,QAAW2B,OAWpC,kBAACzB,EAAD,MACA,6BACA,6BACA,6BACA,6BAEA,kBAACK,EAAD,SC1DYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.7196c675.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const names = ['santo amr nam', 'santo', 'borsha', 'rupali', 'halim', 'hamid'];\n  //const name = names.map(name => name);\n  //console.log(name);\n\n  const products = [\n    {name: 'Photoshop', price: '200$'},\n    {name: 'Illustrator', price: '250$'},\n    {name: 'Indesign', price: '270$'},\n    {name: 'Premear Pro', price: '300$'},\n    {name: 'After Effect', price: '350$'},\n    {name: 'Adobe Audition', price: '400$'}\n  ]\n\n  const productNames = products.map( product => product.name);\n  console.log(productNames);\n  \n\n\n  let person = {\n    name: 'santo',\n    age: 25\n  }\n  const styele = {\n    color: 'red',\n    backgroundColor: 'white'\n  }\n  return (\n    <div className=\"App\">\n\t\t\t<div className=\"App-heade\">\n\t\t\t\t<ul>\n\t\t\t\t\t{\n\t\t\t\t\t\tnames.map(name => <li>{name}</li>)\n\t\t\t\t\t}\n\t\t\t\t</ul>\n\t\t\t\t<Person name= {names[0]} name2 = 'santo'></Person>\n\t\t\t\t<Person name=\"asad\" name2 = \"asad santo\"></Person>\n\t\t\t\t<Person></Person>\n\t\t\t\t<Person></Person>\n\n\t\t\t\t<Friends name = 'pallob' details= 'he is a good boy'></Friends>\n\t\t\t\t<Friends name = 'atick' details= 'he is a very good boy'></Friends>\n\t\t\t\t<Friends name = 'sourov' details= 'he is a better boy'></Friends>\n\t\t\t\t<Friends name = 'nazrul' details= 'he is my boro vai'></Friends>\n\n\n\n\t\n\t\t\t\t{\n\t\t\t\t\tproducts.map(pd => <Product Proname = {pd}></Product>)\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\t{/* <Product Proname = {products[0]}></Product>\n\t\t\t\t<Product Proname = {products[1]}></Product>\n\t\t\t\t<Product Proname = {products[2]}></Product>\n\t\t\t\t<Product Proname = {products[3]}></Product>\n\t\t\t\t<Product Proname = {products[4]}></Product> */}\n\n        {/* counter */}\n        <Counter></Counter>\n        <br/>\n        <br/>\n        <br/>\n        <br/>\n        {/* dynamic user */}\n        <Users></Users>\n      </div>\n    </div>\n  );\n}\n\n// component\nfunction Person(props){\n  const personSyle = {\n    border: '2px solid red',\n    margin: '10px'\n  }\n  //console.log(props);\n  return (\n    <div style={personSyle}>\n      <h1>name: {props.name}</h1>\n      <h3>name</h3>\n      <h3></h3>\n    </div>\n  );\n}\n\nfunction Friends (frdName){\n  const frndStyle ={\n    color: '#0095ff',\n    border: '2px solid #0095ff',\n    margin: '10px'\n  }\n  return(\n    <div style={frndStyle}>\n      <h3>Friend Name: {frdName.name}git </h3>\n      <p>Friend Details: {frdName.details}</p>\n    </div>\n  )\n}\n\nfunction Product(props) {\n  //console.log(props);\n  return (\n    <div className='product-style'>\n      <h2>{props.Proname.name}</h2>\n      <h2>{props.Proname.price}</h2>\n      <button>Buy Now</button>\n    </div>\n  );\n}\n\n// counte increase\nfunction Counter() {\n  const [count, setCoutn] = useState(10);\n  const handelIncrease = () => setCoutn(count + 1);\n  const handelDecrease = () => setCoutn(count - 1);\n  return (\n    <div>\n      <h1>count: {count}</h1>\n      <button onClick={handelIncrease}>Increase</button>\n      <button onClick={handelDecrease}>Decrease</button>\n    </div>\n  );\n}\n\n// data call and load\nfunction Users(userData) {\n  const [user, setusers] = useState([]);\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => setusers(data))\n\n  },[]);\n\n  \n  return(\n    <div>\n      <h3>Dynamic User: {user.length}</h3>\n      <ul>\n        {\n          user.map(user => <li>{user.name}</li>)\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}